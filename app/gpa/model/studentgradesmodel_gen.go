// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	studentGradesFieldNames          = builder.RawFieldNames(&StudentGrades{})
	studentGradesRows                = strings.Join(studentGradesFieldNames, ",")
	studentGradesRowsExpectAutoSet   = strings.Join(stringx.Remove(studentGradesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	studentGradesRowsWithPlaceHolder = strings.Join(stringx.Remove(studentGradesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheStudentGradesIdPrefix                = "cache:studentGrades:id:"
	cacheStudentGradesStudentIdCourseIdPrefix = "cache:studentGrades:studentId:courseId:"
)

type (
	studentGradesModel interface {
		Insert(ctx context.Context, data *StudentGrades) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StudentGrades, error)
		FindOneByStudentIdCourseId(ctx context.Context, studentId int64, courseId int64) (*StudentGrades, error)
		Update(ctx context.Context, data *StudentGrades) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStudentGradesModel struct {
		sqlc.CachedConn
		table string
	}

	StudentGrades struct {
		Id            int64     `db:"id"`
		StudentId     int64     `db:"student_id"`
		CourseId      int64     `db:"course_id"`
		GradeReceived string    `db:"grade_received"`
		CreateTime    time.Time `db:"create_time"` // created time
		UpdateTime    time.Time `db:"update_time"` // updated time
	}
)

func newStudentGradesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStudentGradesModel {
	return &defaultStudentGradesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`student_grades`",
	}
}

func (m *defaultStudentGradesModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	studentGradesIdKey := fmt.Sprintf("%s%v", cacheStudentGradesIdPrefix, id)
	studentGradesStudentIdCourseIdKey := fmt.Sprintf("%s%v:%v", cacheStudentGradesStudentIdCourseIdPrefix, data.StudentId, data.CourseId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, studentGradesIdKey, studentGradesStudentIdCourseIdKey)
	return err
}

func (m *defaultStudentGradesModel) FindOne(ctx context.Context, id int64) (*StudentGrades, error) {
	studentGradesIdKey := fmt.Sprintf("%s%v", cacheStudentGradesIdPrefix, id)
	var resp StudentGrades
	err := m.QueryRowCtx(ctx, &resp, studentGradesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentGradesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentGradesModel) FindOneByStudentIdCourseId(ctx context.Context, studentId int64, courseId int64) (*StudentGrades, error) {
	studentGradesStudentIdCourseIdKey := fmt.Sprintf("%s%v:%v", cacheStudentGradesStudentIdCourseIdPrefix, studentId, courseId)
	var resp StudentGrades
	err := m.QueryRowIndexCtx(ctx, &resp, studentGradesStudentIdCourseIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `student_id` = ? and `course_id` = ? limit 1", studentGradesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, studentId, courseId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentGradesModel) Insert(ctx context.Context, data *StudentGrades) (sql.Result, error) {
	studentGradesIdKey := fmt.Sprintf("%s%v", cacheStudentGradesIdPrefix, data.Id)
	studentGradesStudentIdCourseIdKey := fmt.Sprintf("%s%v:%v", cacheStudentGradesStudentIdCourseIdPrefix, data.StudentId, data.CourseId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, studentGradesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.StudentId, data.CourseId, data.GradeReceived)
	}, studentGradesIdKey, studentGradesStudentIdCourseIdKey)
	return ret, err
}

func (m *defaultStudentGradesModel) Update(ctx context.Context, newData *StudentGrades) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	studentGradesIdKey := fmt.Sprintf("%s%v", cacheStudentGradesIdPrefix, data.Id)
	studentGradesStudentIdCourseIdKey := fmt.Sprintf("%s%v:%v", cacheStudentGradesStudentIdCourseIdPrefix, data.StudentId, data.CourseId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, studentGradesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.StudentId, newData.CourseId, newData.GradeReceived, newData.Id)
	}, studentGradesIdKey, studentGradesStudentIdCourseIdKey)
	return err
}

func (m *defaultStudentGradesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheStudentGradesIdPrefix, primary)
}

func (m *defaultStudentGradesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentGradesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStudentGradesModel) tableName() string {
	return m.table
}
